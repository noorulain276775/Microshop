version: '3.8'

services:
  # ZooKeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: microshop-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  # Kafka broker
  kafka:
    image: confluentinc/cp-kafka:6.2.1
    container_name: microshop-kafka
    ports:
      - "9092:9092"      # Internal Docker network access
      - "29092:29092"    # Host machine access
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181

      # Corrected listeners for internal + host access
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    depends_on:
      - zookeeper

  # Kafka UI
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8080:8080"
    depends_on:
      - kafka
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181

  # MongoDB
  mongo:
    image: mongo:6
    container_name: microshop-mongo
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db

  # User Service
  user-service:
    build: ./user-service
    container_name: user-service
    ports:
      - "4000:4000"
    depends_on:
      - kafka
      - mongo
    environment:
      MONGO_URI: ${MONGO_URI_USER}
      KAFKA_BROKERS: kafka:9092
      ENABLE_KAFKA: 'true'
      JWT_SECRET: ${JWT_SECRET}
    env_file:
      - ./user-service/.env

  product-service:
    build: ./product-service
    container_name: product-service
    ports:
      - "8000:8000"
    depends_on:
      - kafka
      - zookeeper
      - mongo
    environment:
      MONGO_URI: ${MONGO_URI_PRODUCT}
      KAFKA_BROKERS: kafka:9092
    env_file:
      - ./product-service/.env

  # Notification Service (Flask)
  notification-service:
    build: ./notification-service
    container_name: notification-service
    ports:
      - "5000:5000"
    depends_on:
      - kafka
      - mongo
    environment:
      KAFKA_BROKERS: kafka:9092
      KAFKA_TOPIC: user-registered
    env_file:
      - ./notification-service/.env

  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: microshop-mysql
    ports:
      - "3307:3306"
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_ROOT_HOST: '%'
    volumes:
      - mysql-data:/var/lib/mysql
    command: --default-authentication-plugin=mysql_native_password
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Order Service
  order-service:
    build: ./order-service
    container_name: order-service
    ports:
      - "3000:3000"
    depends_on:
      mysql:
        condition: service_healthy
      kafka:
        condition: service_started
    environment:
      KAFKA_BROKERS: kafka:9092
      KAFKA_TOPIC: order-created
      DB_HOST: mysql
      DB_PORT: 3306
      DB_USER: ${MYSQL_USER}
      DB_PASSWORD: ${MYSQL_PASSWORD}
      DB_NAME: ${MYSQL_DATABASE}
      JWT_SECRET: ${JWT_SECRET}
      PORT: 3000
      NODE_ENV: development
      SERVICE_NAME: order-service

volumes:
  mongo-data:
  mysql-data:
